# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.

stages:
  - build
  - test
  - deploy
image: maven:3.9.6-eclipse-temurin-17

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - .m2/repository

variables:
  MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository"

build-job:
  stage: build
  script:
    - echo "Compiling the code..."
    - mvn install:install-file -Dfile=.libs/eodsql.jar -DgroupId=net.lemnik -DartifactId=eodsql -Dversion=2.2 -Dpackaging=jar
    - mvn package -DskipTests
    - echo "Compile complete."

test-iretation2-job:
  stage: test
  #  image: maven:3.9.6-eclipse-temurin-17
  before_script:
    - apt-get update && apt-get install -y make
    - git config --global user.email "remosehjhb024@student.wethinkcode.co.za"
    - git config --global user.name "Reitumetse Marline Mosehla"
  script:
    - echo "Running unit tests..."
    - make test-iteration-2
    - echo "Unit tests complete."

test-our-server-job:
  stage: test
  #  image: maven:3.9.6-eclipse-temurin-17
  before_script:
    - apt-get update && apt-get install -y make
    - git config --global user.email "remosehjhb024@student.wethinkcode.co.za"
    - git config --global user.name "Reitumetse Marline Mosehla"
  script:
    - echo "Running unit tests..."
    - make test-our-server
    - echo "Unit tests complete."

test-saveWorld-job:
  stage: test
  #  image: maven:3.9.6-eclipse-temurin-17
  before_script:
    - apt-get update && apt-get install -y make
    - git config --global user.email "remosehjhb024@student.wethinkcode.co.za"
    - git config --global user.name "Reitumetse Marline Mosehla"
  script:
    - echo "Running unit tests..."
    - make test-iteration-3
    - echo "Unit tests complete."

# NEW: Docker smoke test (build image, run container, probe endpoints)
docker-smoke-test:
  stage: test
  image: docker:25.0.3
  services:
    - name: docker:25.0.3-dind
      command: ["--tls=false"]
  variables:
    DOCKER_HOST: "tcp://docker:2375"
    DOCKER_TLS_CERTDIR: ""
    DOCKER_DRIVER: overlay2
  script:
    - docker version
    - docker info

    - docker build -t robot-world:dev .

    # Ensure DB file exists in repo root (required for /world endpoints)
    - test -f robot_world.db || (echo "robot_world.db missing" && exit 1)

    # Start the app: mount DB, run TCP on 5000 (matches the Web API's internal client)
    - |
      docker run -d --name robot-world \
        -v "$CI_PROJECT_DIR/robot_world.db:/app/robot_world.db" \
        -p 5000:5000 \
        robot-world:dev -p 5000 -s 10 -o 1,1

    # Probe the Web API from inside the container
    - docker exec robot-world sh -lc 'apt-get update >/dev/null && apt-get install -y curl >/dev/null'
    - docker exec robot-world sh -lc 'curl -sf http://localhost:7000/health'
    - docker exec robot-world sh -lc 'curl -sf http://localhost:7000/world'
    - docker exec robot-world sh -lc 'curl -sf http://localhost:7000/world/all'
    - docker exec robot-world sh -lc 'curl -sf http://localhost:7000/world/pluto'
    - docker exec robot-world sh -lc 'curl -sf -X POST http://localhost:7000/robot/alpha/launch'
    - docker exec robot-world sh -lc 'curl -sf -X POST http://localhost:7000/robot/alpha/look'
  after_script:
    - docker logs --tail=200 robot-world || true
    - docker rm -f robot-world || true

docker-build:
  stage: deploy
  image: docker:stable
  services:
    - docker:dind
  variables:
    CI_REGISTRY: gitlab.wethinkco.de:5050
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  dependencies:
    - build-job
  environment: production
  script:
    - echo "Logging in to docker registry"
    - echo "$CI_REGISTRY_PASSWORD" | docker login $CI_REGISTRY --username "$CI_REGISTRY_USER" --password-stdin
    - docker build -t gitlab.wethinkco.de:5050/mmntshajhb024/brownfields_robot_worlds_1 .
    - docker push gitlab.wethinkco.de:5050/mmntshajhb024/brownfields_robot_worlds_1
    - echo "Application successfully deployed"